#summary WebSocketsアプリケーションフレームワーク

= プログラミングガイド =

!WebSocketsアプリケーションフレームワーク wsq

 # アプリケーションモデル
   アプリケーションを、１つのurl配下に構築、その中に複数のqueueを配備、ブラウザより、queueに対して、更新(publish),参照(subscribe)することにより動作します。
  特徴
   * シンプルなAPI
   * !WebSocketsの特徴を生かした、リアルタイムな通信
   * Phantom Proxyの認証機能（roleベース）を利用
   * blobデータの送受信に対応、ドラッグアンドドロップ等よるバイナリデータが扱えます
   * !WebSocketsが利用できないブラウザでは、XHRにて動作、機能をシミュレート
   * クロスドメインで利用可能、ドメイン制限も可能
   * bookmarkletから利用可能
 # clientAPI
  ブラウザからは、javascriptインタフェースを使ってwsqにアクセスする。
  * 接続メソッド
   * ph.wsq.open(url,openCb,eventCb)
    認証およびアプリケーションへの接続を行います
    * url:'/path';
    'http(s)://host:port/path'
    'ws(s)://host:port/path'
    * openCb:openリクエストの結果が通知される。
    * evnetCb:このconnectionに関するイベントが通知される。
     connection.cbType INFO|ERROR|MESSAGE
     connection.cause  open|subscribe|publish|qnames|close|unsubscribe|server
     connection.message opend|closed|
     connection.qname 対象qname
     connection.subId 対象subid
     connection.qnameList qnameメソッドの復帰情報、このurlに登録されているqueue名群
     openCbでconnectionを受け取る
     openCbは、その後のconnectionイベントの通知も受ける
  * connectionオブジェクト
    各queueへの操作や接続の解消を行う
    * publish(qname,message,subid);
     message:string or object or blob
    * subscribe(qname,subscribeCb,subid);
     subscribeCb:subscribeCb(message);
    * unsubscribe(qname,subid);
    * qnames();
     open時に指定したurl配下にあるqname一覧を要求します
    * close();
     接続を解除します
 # ServerAPI
  現状javaインタフェースだが、javascriptインタフェースを用意したい
  naru.aweb.wsq.Wsqletインタフェースを実装
  * naru.aweb.wsq.Wsqletクラス
  * naru.aweb.wsq.WsqCtxクラス
  * naru.aweb.wsq.Peerクラス