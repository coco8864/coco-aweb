#summary アプリケーションフレームワーク

= !PhantomLinkプログラミングガイド =

 # html5アプリケーションフレームワーク
   !PhantomLinkは、以下のようなhtml5技術を利用したapplication frameworkです。
   * websocket
   * Cross-document messaging
   * webstorage
   * !AppCache
  これらのhtml5技術は、単体では実際にアプリケーションに適用できないものがあります。たとえば、websocketの認証は、websocketの技術だけでは実装できず、Cross-document messagingを利用したAPI認証の仕組みが必要です。また、webstorageに保存したデータは誰でも参照可能な状態になるため、端末のマルチユーザ利用を想定した場合!AppCache機能を利用したoffline認証の仕組みが必要となります。
  !PhantomLinkは、phantom serverの機能を利用し、html5技術をラッピングしてapplicationの作成を助けるframeworkを提供します。
 # アプリケーションモデル
   linkは、publish/subscribe方式のメッセージ通信と各種スコープを持つstorageサービスから構成される。
   offline時にも、ブラウザスコープのstorageは、利用可能です。
   特徴
   * シンプルなAPI
   * Phantom Serverの多様な認証機能を利用
   * !WebSocketsの利用可否にかかわらずリアルタイムな通信を実現
   * bookmarkletなど3ed pertyのサイトからも安全に利用可能
   * offline時でもブラウザにスコープを持つstorageは利用可能
   * ブラウザに保持するデータは暗号化されており、offline認証後そのユーザだけが参照可能となる
 # clientAPI
   [https://phapp.coco.0t0.jp/api/coffee/ clientAPI]の詳細
   [https://phapp.coco.0t0.jp/api/coffee/phLink.coffee.html#ph.link ph.link]が入口のメソッドとなります。
 # ServerAPI
  現状javaインタフェースだが、javascriptインタフェースを用意したい
  naru.aweb.link.api.Linkletインタフェースを実装
  * naru.aweb.wsq.Wsqletクラス
  * naru.aweb.wsq.!WsqCtxクラス
  * naru.aweb.wsq.Peerクラス