#summary アプリケーションフレームワーク

= !PhantomLinkプログラミングガイド =

 * html5アプリケーションフレームワーク
   !PhantomLinkは、以下のようなhtml5技術を利用したapplication frameworkです。
   * websocket
   * Cross-document messaging
   * webstorage
   * !AppCache
  これらのhtml5技術は、単体では実際にアプリケーションに適用できないものがあります。たとえば、websocketの認証は、websocketの技術だけでは実装できず、Cross-document messagingを利用したAPI認証の仕組みが必要です。また、webstorageに保存したデータは誰でも参照可能な状態になるため、端末のマルチユーザ利用を想定した場合!AppCache機能を利用したoffline認証の仕組みが必要となります。
  !PhantomLinkは、phantom serverの機能を利用し、html5技術をラッピングしてapplicationの作成を助けるframeworkを提供します。
 * アプリケーションモデル
   linkは、publish/subscribe方式のメッセージ通信と各種スコープを持つstorageサービスから構成されます。
   offline時にも、offline認証する事で、ブラウザスコープのstorageは、安全に利用することができます。

   publish/subscribe APIでメッセージを送受信する例
    {{{
    var link=ph.link(url);
    var sub=link.subscribe('qname','subname');
    sub.publish(msg);

    sub.onMsg(function(msg){});
    }}}

   storage APIでブラウザに情報を保存する例
    {{{
    var link=ph.link(url);
    var storage=link.storage(ph.SCOPE.XXXX);
    storage.setItem(key,value);

    storage.getItem(key,function(value){...});
    //storage.on(key,function(data){data.value...});/*値の変化を監視する場合*/
    }}}

  特徴
  * シンプルなAPI
  * Phantom Serverの多様な認証機能を利用
  * !WebSocketsの利用可否にかかわらずリアルタイムな通信を実現
  * bookmarkletなど3ed pertyのサイトからも安全に利用可能
  * offline時でもブラウザにスコープを持つstorageを利用可能
  * ブラウザに保持するデータは暗号化されており、offline認証後そのユーザだけが参照可能となる
 * ClientAPI
   詳細は、[https://phapp.coco.0t0.jp/api/coffee/ ClientAPI]を参照ください。
   * エントリーポイントは、[https://phapp.coco.0t0.jp/api/coffee/phLink.coffee.html#ph.link ph.link]
   * pub/sub通信インタフェースは、link.subscribeの復帰オブジェクト[https://phapp.coco.0t0.jp/api/coffee/phLinkSubscription.coffee.html Subscription]です。
   * storageインタフェースは、link.srorageの復帰オブジェクト[https://phapp.coco.0t0.jp/api/coffee/phLink.coffee.html#PrivateSessionStorage Storage]です。
   * 参考[https://phapp.coco.0t0.jp/storageTest.html storageTest],[https://phapp.coco.0t0.jp/pubsubTest.html pubsubTest]
 

 * ServerAPI
   基本的なpub/sub通信のためにサーバ側のアプリケーションは必要ありませ。しかし複雑な処理をするためには、Javaによりサーバアプリケーションを記述することができます。詳細は、[https://phapp.coco.0t0.jp/api/java/ ServerAPI]を参照してください。
   * clientからのpublish/subscribe通信を送受信するには、[https://phapp.coco.0t0.jp/api/java/naru/aweb/link/api/Linklet.html Linkletインタフェース]を実装してください。
   * 作成したクラスは、以下の書式にそってmapping定義に追加してください。
    link:{@!LinkName:"Managerの固有名",@!MaxSubscribe:セションに保持できる最大subscribe数(16),"qname":{"subname":"linklet継承クラス名".....}}