

#summary アプリケーションフレームワーク

= プログラミングガイド =

html5アプリケーションフレームワーク link

 # アプリケーションモデル
   linkは、メッセージ通信とstorageサービスから構成される。
   アプリケーションを、１つのurlで構築、複数のqueueを配備する。publishメソッドでブラウザの情報queueに通知し、subscribeメソッドでqueueからの通知情報をブラウザで受け取る。
  特徴
   * シンプルなAPI
   * Phantom Serverの認証機能（roleベース）を利用
   * !WebSocketsの利用回避にかかわらずリアルタイムな通信を実現
   * bookmarkletから利用可能
   * offline時にはoffline認証を行いブラウザ内に保存したデータを参照
   * ブラウザに保持するデータは暗号化されており、offline認証で参照可能となる

 # clientAPI
  ブラウザからは、javascriptインタフェースを使ってlinkアプリケーションにアクセスする。
  * 接続メソッド
   * ph.wsq.open(url,openCb,eventCb)
    認証およびアプリケーションへの接続を行います
    * url:'/path';
    'http(s)://host:port/path'
    'ws(s)://host:port/path'
    * openCb:openリクエストの結果が通知される。
      evnetCbの内open結果だけが通知される
    * evnetCb:このconnectionに関するイベントが通知される。
     connection.cbType INFO|ERROR|MESSAGE
     connection.cause  open|close|subscribe|unsubscribe|publish|qnames|server
     connection.message opend|closed|
     connection.qname 対象qname
     connection.subId 対象subid
     connection.qnameList qnameメソッドの復帰情報、このurlに登録されているqueue名群
     openCbでconnectionを受け取る
     openCbは、その後のconnectionイベントの通知も受ける
   * ph.wsq.bind(evnetName,eventCb)
     特定のeventだけがcbされる
  * connectionオブジェクト
    queueとの接続(open)単位で作成される、各queueへの操作や接続の解消を行う
    * publish(qname,message,subid);
     message:string or object or blob
    * subscribe(qname,subscribeCb,subid);
     subscribeCb:subscribeCb(message);
    * unsubscribe(qname,subid);
    * qnames();
     open時に指定したurl配下にあるqname一覧を要求します
    * close();
     接続を解除します
 # ServerAPI
  現状javaインタフェースだが、javascriptインタフェースを用意したい
  naru.aweb.link.api.Linkletインタフェースを実装
  * naru.aweb.wsq.Wsqletクラス
  * naru.aweb.wsq.!WsqCtxクラス
  * naru.aweb.wsq.Peerクラス