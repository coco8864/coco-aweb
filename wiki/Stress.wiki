#summary 負荷テストの方法

= 負荷テスト =

 採取したトレース情報を連続的にサーバに送信することでサーバの性能を測定することができます。対象サーバには負荷がかかるかかります。本機能は十分注意して使ってください。

 以下、サンプルサイトは、テスト用に作ったサイトであり、負荷をかけても問題ありません。このサイトを対象に説明します。
{{{
 http://ph-sample.appspot.com
}}}

 == 手順 ==
  # 以下urlにリクエストしてトレースを採取してください。
    http://ph.ph-sample.appspot.com/
  # ConsoleにログインしてaccessLogタグを表示してください。
    更新ボタンを押下して最新のリストにしてください。
  # 先頭付近にある以下２つのエントリを選択してください。
    * {{{GET http://ph.ph-sample.appspot.com/images/3.jpg HTTP/1.1}}}
    * {{{GET http://ph.ph-sample.appspot.com/ HTTP/1.1}}}
    前者は、採取フェーズで最後に見た画像となっておりタイミングよって番号が違います。
  # stressボタンを押下してstressオプション入力ダイアログを表示します。
  # ダイアログに以下を設定した後、okボタンを押下してテストを開始、ダイアログを閉じます。
    * test name : 任意ここでは"test"とします。
    * browser count : シミュレートするブラウザの数 ここでは10とします。
    * loop count : 選択した１エントリにリクエストする総数、ここでは100とします。
    シミュレートしたブラウザ１つあたりが平均10回ループするという意味です。
    * keepAlive : 負荷テスト中にkeepAliveを行うか否か、ここでははチェックします。
    * accessLog : 負荷テスト中にaccessLogを採取するか否か、ここでははチェックします。
    Phantom Proxy側の処理が増えます。後で１つ１つのリクエストを確認する必要がないのであれば、チェックは必要ありません。
    * responseHeaderTrace : 負荷テスト中にresponseHeaderをトレースするか否か、ここでははチェックします。
    accessLogをチェックした場合に有効になります。Phantom Proxy側の処理が増えます。後で１つ１つのresponseHeaderを確認する必要がないのであれば、チェックは必要ありません。
    * responseBodyTrace : 負荷テスト中にresponseHeaderをトレースするか否か、ここでははチェックします。
    accessLogをチェックした場合に有効になります。Phantom Proxy側の処理が増えます。後で１つ１つのresponseBodyTraceを確認する必要がないのであれば、チェックは必要ありません。
  # statusタブのchannelの項目が10＋数個となり、10ブラウザのシミュレーションである事が確認できます。
  # 負荷テストが終了すると、メッセージボックスでかかった時間が表示されます。
  # stressタブを開くとリクエスト性能の一覧が表示されます。集計項目は以下です。
    * 全リクエストの総和
    * requestLineおよびstatuCodeが同一のリクエストで集計
    集計の時間項目は、ミリ秒、括弧内は標準偏差（ばらつき）です。
    負荷により、一部のリクエストが"500"でレスポンスされているのではないでしょうか？
  # 今回は、accessLogも採取したので、accessLogタブで１つ１つのリクエストも確認できます。