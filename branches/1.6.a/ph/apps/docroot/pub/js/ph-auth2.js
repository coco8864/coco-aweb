// Generated by CoffeeScript 1.6.1
(function() {
  var Auth, PhAuth,
    _this = this,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (window.ph.auth) {
    return;
  }

  PhAuth = (function() {

    function PhAuth() {
      var _this = this;
      this._aplCheckCb = function(res) {
        return PhAuth.prototype._aplCheckCb.apply(_this, arguments);
      };
      this._authCheckCb = function(res) {
        return PhAuth.prototype._authCheckCb.apply(_this, arguments);
      };
      this._onMessage = function(ev) {
        return PhAuth.prototype._onMessage.apply(_this, arguments);
      };
      this._alwaysAsyncAuth = function(auth) {
        return PhAuth.prototype._alwaysAsyncAuth.apply(_this, arguments);
      };
    }

    PhAuth.prototype._authFrameName = '__phAuthFrame';

    PhAuth.prototype._authEachFrameName = '__phAuthEachFrame_';

    PhAuth.prototype._infoPath = '/info';

    PhAuth.prototype._checkAplQuery = '?__PH_AUTH__=__CD_CHECK__';

    PhAuth.prototype._checkWsAplQuery = '?__PH_AUTH__=__CD_WS_CHECK__';

    PhAuth.prototype._urlPtn = /^(?:([^:\/]+:))?(?:\/\/([^\/]*))?(.*)/;

    PhAuth.prototype._auths = {};

    PhAuth.prototype._authQueue = [];

    PhAuth.prototype._processAuth = null;

    PhAuth.prototype._reqQueue = [];

    PhAuth.prototype._processReq = null;

    PhAuth.prototype._finAuth = function(res) {
      var auth;
      auth = this._processAuth;
      auth.result = res.result;
      if (res.result) {
        auth._setup(res);
      } else {
        delete this._authQueue[auth._keyUrl];
        auth._deferred.reject(auth);
      }
    };

    PhAuth.prototype._alwaysAsyncAuth = function(auth) {
      auth.trigger('done', auth);
      this._processAuth = null;
      this._call();
    };

    PhAuth.prototype._callAsyncAuth = function(auth) {
      this._authQueue.push(auth);
      this._call();
    };

    PhAuth.prototype._call = function() {
      var auth;
      if (this._processAuth !== null || this._authQueue.length === 0) {
        return;
      }
      auth = this._authQueue.pop();
      this._processAuth = auth;
      this._requestUrl(auth._checkAplUrl, this._aplCheckCb);
    };

    PhAuth.prototype._requestUrl = function(url, cb) {
      var req;
      req = {
        url: url,
        cb: cb
      };
      this._reqQueue.push(req);
      this._request();
    };

    PhAuth.prototype._request = function() {
      var req, t;
      if (this._processReq !== null || this._reqQueue.length === 0) {
        return;
      }
      req = this._reqQueue.pop();
      this._processReq = req;
      this._frame[0].src = req.url;
      t = this;
      req.timerId = setTimeout((function() {
        t._requestCallback({
          result: false,
          reason: 'timeout'
        });
        t._frame[0].src = 'about:blank';
        req.timerId = null;
      }), 1000);
    };

    PhAuth.prototype._requestCallback = function(res) {
      var reqestCb;
      reqestCb = this._processReq.cb;
      this._processReq = null;
      reqestCb(res);
      this._request();
    };

    PhAuth.prototype._init = function() {
      this._frame = ph.jQuery("<iframe width='0' height='0' frameborder='no' " + ("name='" + this._authFrameName + "' >") + "</iframe>");
      ph.jQuery("body").append(this._frame);
    };

    PhAuth.prototype._onMessage = function(ev) {
      var req, res;
      if (!this._frame || ev.source !== this._frame[0].contentWindow) {
        return;
      }
      this._frame[0].src = 'about:blank';
      req = this._processReq;
      if (!req) {
        return;
      }
      clearTimeout(req.timerId);
      req.timerId = null;
      if (req.url.lastIndexOf(ev.origin, 0) !== 0) {
        return;
      }
      res = ph.JSON.parse(ev.data);
      this._requestCallback(res);
    };

    PhAuth.prototype._authCheckCb = function(res) {
      if (res.result === 'redirect') {
        this._requestUrl(res.location, this._authCheckCb);
      } else if (res.result === 'redirectForAuthorizer') {
        location.href = res.location;
      } else {
        this._finAuth(res);
      }
    };

    PhAuth.prototype._aplCheckCb = function(res) {
      var redirectUrl;
      if (res.result === 'redirect') {
        redirectUrl = res.location + '&originUrl=' + encodeURIComponent(window.location.href);
        this._requestUrl(redirectUrl, this._authCheckCb);
      } else {
        this._finAuth(res);
      }
    };

    PhAuth.prototype.auth = function(aplUrl, cb) {
      var auth, authDomain, authObj, authPath, checkAplUrl, dfd, keyUrl, protocol;
      aplUrl.match(this._urlPtn);
      protocol = RegExp.$1;
      authDomain = RegExp.$2;
      authPath = RegExp.$3;
      keyUrl = checkAplUrl = null;
      if (protocol === 'ws:') {
        keyUrl = "http://" + authDomain + authPath;
        checkAplUrl = keyUrl + this._checkWsAplQuery;
      } else if (protocol === 'wss:') {
        keyUrl = "https://" + authDomain + authPath;
        checkAplUrl = keyUrl + this._checkWsAplQuery;
      } else if (protocol === null || protocol === '') {
        keyUrl = "" + location.protocol + "//" + location.host + authPath;
        checkAplUrl = keyUrl + this._checkAplQuery;
      } else {
        keyUrl = aplUrl;
        checkAplUrl = aplUrl + this._checkAplQuery;
      }
      authObj = this._auths[keyUrl];
      if (authObj) {
        auth = authObj.promise;
        if (cb && auth.state() === 'pending') {
          auth.on('done', cb);
        } else if (cb) {
          cb(auth);
        }
        return auth;
      }
      dfd = ph.jQuery.Deferred();
      auth = dfd.promise(new Auth(keyUrl, checkAplUrl, dfd));
      auth._checkAplUrl = checkAplUrl;
      auth.on('done', cb);
      auth.always(this._alwaysAsyncAuth);
      this._auths[keyUrl] = {
        deferred: dfd,
        promise: auth
      };
      this._callAsyncAuth(auth);
      return auth;
    };

    PhAuth.prototype.info = function(cb, authUrl) {
      var url;
      if (!authUrl) {
        authUrl = ph.authUrl;
      }
      url = authUrl + this._infoPath;
      this._requestUrl(url, cb);
    };

    return PhAuth;

  })();

  window.ph.auth = new PhAuth();

  ph.jQuery(function() {
    ph.auth._init();
    return ph.event.on('message', ph.auth._onMessage);
  });

  Auth = (function(_super) {

    __extends(Auth, _super);

    Auth.prototype._reqQueue = [];

    Auth.prototype._processReq = null;

    function Auth(_keyUrl, _checkAplUrl, _deferred) {
      var _this = this;
      this._keyUrl = _keyUrl;
      this._checkAplUrl = _checkAplUrl;
      this._deferred = _deferred;
      this._onMessage = function(ev) {
        return Auth.prototype._onMessage.apply(_this, arguments);
      };
      this._frameLoad = function() {
        return Auth.prototype._frameLoad.apply(_this, arguments);
      };
      Auth.__super__.constructor.apply(this, arguments);
      ph.event.on('message', this._onMessage);
    }

    Auth.prototype._setup = function(res) {
      this.loginId = res.loginId;
      this.authUrl = res.authUrl;
      this.appSid = res.appSid;
      this.token = res.token;
      this._loadFrame = true;
      this._frame = ph.jQuery("<iframe width='0' height='0' frameborder='no' " + ("name='" + ph.auth._authEachFrameName + this._keyUrl + "'") + ("src='" + this.authUrl + "/authFrame?origin=" + location.protocol + "//" + location.host + "' >") + "</iframe>");
      return ph.jQuery("body").append(this._frame);
    };

    Auth.prototype._frameLoad = function() {
      return this._deferred.resolve(this);
    };

    Auth.prototype._requestQ = function(req, cb) {
      var reqObj;
      reqObj = {
        req: req,
        cb: cb
      };
      this._reqQueue.push(reqObj);
      this._request();
    };

    Auth.prototype._request = function() {
      var reqObj, reqText;
      if (this._processReq !== null || this._reqQueue.length === 0) {
        return;
      }
      reqObj = this._reqQueue.pop();
      this._processReq = reqObj;
      reqText = ph.JSON.stringify(reqObj.req);
      this._frame[0].contentWindow.postMessage(reqText, '*');
    };

    Auth.prototype._requestCallback = function(res) {
      var reqestCb;
      reqestCb = this._processReq.cb;
      this._processReq = null;
      reqestCb(res);
      this._request();
    };

    Auth.prototype._onMessage = function(ev) {
      var req, res;
      if (!this._frame || ev.source !== this._frame[0].contentWindow) {
        return;
      }
      if (this._loadFrame) {
        this._loadFrame = false;
        this._info = ph.JSON.parse(ev.data);
        this._deferred.resolve(this);
        return;
      }
      req = this._processReq;
      if (!req) {
        return;
      }
      res = ph.JSON.parse(ev.data);
      this._requestCallback(res);
    };

    Auth.prototype.logout = function(cb) {
      this._requestQ({
        type: 'logount'
      }, cb);
      return this;
    };

    Auth.prototype.info = function(cb) {
      this._requestQ({
        type: 'info'
      }, cb);
      return this;
    };

    Auth.prototype.encrypt = function(cb, loginid, plainText) {
      this._requestQ({
        type: 'encrypt',
        plainText: plainText
      }, function(res) {
        return cb(res.encryptText);
      });
      return this;
    };

    Auth.prototype.decrypt = function(cb, loginid, encryptText) {
      this._requestQ({
        type: 'decrypt',
        encryptText: encryptText
      }, function(res) {
        return cb(res.plainText);
      });
      return this;
    };

    return Auth;

  })(ph.EventModule);

}).call(this);
