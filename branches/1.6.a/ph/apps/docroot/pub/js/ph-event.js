// Generated by CoffeeScript 1.6.1
(function() {
  var EventModule,
    _this = this,
    __slice = [].slice;

  EventModule = (function() {

    function EventModule() {
      var _this = this;
      this.off = function(name, cb) {
        return EventModule.prototype.off.apply(_this, arguments);
      };
      this._callback = {};
    }

    EventModule.prototype.on = function(name, callback) {
      if (this._callback[name] == null) {
        this._callback[name] = [];
      }
      this._callback[name].push(callback);
      return this;
    };

    EventModule.prototype.off = function(name, cb) {
      var i, list, n, _i, _ref;
      list = this._callback[name];
      if (!list) {
        return this;
      }
      if (!cb) {
        delete this._callback[name];
        return this;
      }
      n = list.length;
      for (i = _i = _ref = n - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
        if (list[i] === callback) {
          list.splice(i, 1);
        }
      }
      return this;
    };

    EventModule.prototype.trigger = function() {
      var args, callback, list, name, _i, _len;
      name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      list = this._callback[name];
      if (!list) {
        return this;
      }
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        callback = list[_i];
        callback.apply(this, args);
      }
      return this;
    };

    EventModule.prototype.checkState = function() {
      if (this.deferred.state() !== 'pending') {
        throw 'state error:' + this.deferred.state();
      }
    };

    return EventModule;

  })();

  window.ph.EventModule = EventModule;

  window.ph.event = new ph.EventModule();

  window.ph.messageCb = function(ev) {
    return window.ph.event.trigger('message', ev);
  };

  window.ph.unloadCb = function(ev) {
    return window.ph.event.trigger('unload', ev);
  };

  window.ph.strageCb = function(ev) {
    return window.ph.event.trigger('strage', ev);
  };

  if (window.addEventListener) {
    window.addEventListener('message', window.ph.messageCb, false);
  } else if (window.attachEvent) {
    window.attachEvent('onmessage', window.ph.messageCb);
  }

  ph.jQuery(window).unload(window.ph.unloadCb);

  ph.jQuery(window).bind("storage", window.ph.strageCb);

}).call(this);
