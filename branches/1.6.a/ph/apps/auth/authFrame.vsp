<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja" lang="ja" dir="ltr">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Pragma" content="no-cache"> 
<meta http-equiv="Cache-Control" content="no-cache"> 
<meta http-equiv="Expires" content="0"> 
<script type="text/javascript" src="/pub/js/ph-loader.js"></script>
<script type="text/javascript" src="/pub/js/aes.js"></script>
<script  type="text/javascript"><!--
##親frameのlocation.href
var parentOrigin;
var offlinePassHash='$esc.javascript(${offlinePassHash})';
var info=ph.JSON.parse('$esc.javascript(${info})');

##crossDomainRequest情報
var cdr={isIn:false,req:null};

function onRequest(ev){
  if(ev.source!==parent){
    return;
  }
  if(!ev.data){
    return;
  }
  var origin = ev.origin;
  var req=ph.JSON.parse(ev.data);
  if(parentOrigin==="*" || origin===parentOrigin){
    if(cdr.isIn){
      return;//parentからresponseを待たずに続けてrequestされた（異常)
    }
    cdr.isIn=true;
    cdr.req=req;
    if(req.type==="encrypt"){
      req.encryptText=CryptoJS.AES.encrypt(req.plainText, offlinePassHash).toString();
      response(req);
    }else if(req.type==="decrypt"){
      req.plainText=CryptoJS.AES.decrypt(req.encryptText, offlinePassHash).toString(CryptoJS.enc.Utf8);
      response(req);
    }else if(req.type==="info"){
      response(info);
    }
  }
}

function response(msg){
  cdr.isIn=false;
  cdr.req=null;
  var jsonMsg=ph.JSON.stringify(msg);
  parent.postMessage(jsonMsg,parentOrigin);
}

ph.jQuery(function(){
  parentOrigin=decodeURIComponent(location.search.substring('?origin='.length));
  if(parentOrigin=='file://'){
    parentOrigin='*';
  }
  ph.event.on('message',onRequest);
  response(info);
##  postMessageToParent({load:true},parentOrigin);
});
// --></script>
</head>
<body>
</body>
</html>
